{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"OQL"},{"location":"/index.html#oql","text":"Object Query Language (OQL) is a simple relational database query language inspired by GraphQL and SQL, but designed to be translated query-for-query into database engine specific SQL, with identical behaviour across supported engines.","title":"OQL"},{"location":"/overview.html","text":"","title":"Overview"},{"location":"/overview.html#overview","text":"OQL is a language for querying a relational database. The query syntax draws inspiration from GraphQL and is similar, but with many differences. Some capabilities missing from GraphQL have been added, and some capabilities found in GraphQL have a different syntax. We believe that much of conventional SQL syntax is still preferable to creating a completely new syntax for every single feature of the query language. However, whereas SQL can be seen as a “low level” relational query language, OQL takes a higher level Entity-Relationship (ER) Model view of the database.\nThe name “OQL” refers to both a software library, and a query language implemented within that library. The OQL library provides support for data retrieval (via the OQL query language), and a query builder for constructing queries step by step in your code. There are also class methods for performing all kinds of mutations, including mutations that support the ER model view of the database. Furthermore, query and mutation operations all abide by the supplied ER data model.\nSome features of the OQL language include:\nsimilar to GraphQL in that query results have exactly the structure requested in the query (i.e., you get what you ask for) uses a very simple Entity-Relationship Model description of the database works with the PostgreSQL database system designed to work with existing databases without having to change the database at all","title":"Overview"},{"location":"/installation.html","text":"","title":"Installation"},{"location":"/installation.html#installation","text":"","title":"Installation"},{"location":"/usage.html","text":"","title":"Usage"},{"location":"/usage.html#usage","text":"","title":"Usage"},{"location":"/api.html","text":"","title":"API"},{"location":"/api.html#api","text":"","title":"API"},{"location":"/syntax.html","text":"","title":"Syntax"},{"location":"/syntax.html#syntax","text":"The following syntax (or railroad) diagrams of both the data modeling and query language provide a clear description of those languages. The syntax for json (JSON syntax) has been omitted.","title":"Syntax"},{"location":"/syntax.html#data-modeling-language","text":"An “Entity-Relationship” style language is used to describe the database. Only the portions of the database for which OQL is being used need to be described.","title":"Data Modeling Language"},{"location":"/syntax.html#grammar-rules","text":"Model The complete data model is a series of entities. Entity Entities correspond to tables in the database. An entity comprises an identifier matching the name of the corresponding table, which can be given an alias, and a series of attributes. Identifier An identifier can have letters, digits, underscores, and dollar signs, but may not begin with a digit. Alias Aliases are identifiers. Attribute Attributes correspond to columns in a table, if they have a datatype, or a simple entity type (i.e., just the name of an entity). An attribute that begins with an asterisk is the primary key. The name of an attribute can be aliased. An attribute that ends with an exclamation mark can’t be null or excluded when inserting. Type There are several kinds of attribute types: Datatype Corresponds to a databased engine datatype. These attributes correspond to table columns that are not foreign keys. Many-to-one This is the entity relationship type that corresponds to a column. One-to-many This is the array entity relationship type that represents all the entities (rows) that are referencing any given entity. Many-to-many the many-to-many relationship One-to-many the one-to-many relationship DataType Any one of the basic datatypes that are commonly support by database systems. EntityName An EntityName is an identifier that corresponds either to the identifier given as the entity name if it wasn’t aliased, or to the alias if it was. AttributeName An AttributeName is an identifier that corresponds either to the identifier given as the attribute name if it wasn’t aliased, or to the alias if it was.","title":"Grammar Rules"},{"location":"/examples.html","text":"","title":"Examples"},{"location":"/examples.html#examples","text":"","title":"Examples"},{"location":"/release-notes.html","text":"","title":"Release Notes"},{"location":"/release-notes.html#release-notes","text":"","title":"Release Notes"}]}